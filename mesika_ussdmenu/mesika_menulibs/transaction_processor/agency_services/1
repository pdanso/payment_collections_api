import transaction_processor.deposit_processor as deposit_processor
import transaction_processor.withdrawal_processor as withdrawal_processor
import transaction_processor.loans_processor.repayment as loans_repayment

import transaction_processor.payment_processor.payment_methods as payment_processor
import transaction_processor.payment_processor.momo as pay_momo
import transaction_processor.payment_processor.bank as pay_bank

import core_processor
import session_processor
from mesika_libs.logging import Logger
from mesika_libs.Caching import Cacher

import json

""" Initialising the logger """
host = "127.0.0.1"
port = 24777
libhandler = Logger("ussd_agency_services", host, port)

logfile = "Agency"


def magnet_agent(request, bank_code, url, last_position, pos, goback_message):
    menu_response = ""
    msisdn = request.GET["msisdn"]
    networkid = request.GET["networkid"]
    sessionid = request.GET["sessionid"]
    mode = request.GET["mode"]
    userdata = request.GET["userdata"]

    if last_position == "MAGSUB":
        count = 0
        message = ""
        response = {"reason": "hello", "services": [{"id": 1, "name": "Pay Loan"},
                                                    {"id": 2, "name": "Deposit"},
                                                    {"id": 3, "name": "Withdrawal"},
                                                    {"id": 4, "name": "Other Income"}]}
        for n in response['services']:
            service_id = n['id']
            service = n['name']
            service = service.title()
            count += 1
            message += str(count) + '. ' + str(service) + '^'

        str_conv = json.dumps(response['services'])  # converting list to json string

        message = f"Please select an option:^{message}"
        menu_response = core_processor.make_response.make_response(request, "more", message)
        session_processor.store_menupoint.store_menupoint(request, "MAGNET", str_conv)
        libhandler.writelog(logfile, f"Message:{message}")

    elif last_position == "MAGNET":
        sel0 = userdata
        sel0 = int(sel0)
        sel = sel0 - 1

        extract = session_processor.get_ussd_extra.get_ussd_extra(pos)

        service_list = json.loads(extract)

        service_id = service_list[sel]['id']
        service_name = service_list[sel]['name']
        libhandler.writelog(logfile, f"extract1: {service_id}")
        libhandler.writelog(logfile, f"extract2: {service_name}")

        if service_id == 1:  # view commission balance
            # # payload = {"msidsn": msisdn, "service_id": service_id}
            # # response = core_processor.call_api(url, payload, "agency_banking", "getAgentBalance",
            # # api_version=1)
            # # status = response['status']
            #
            # status = 200
            # if status == 200:
            #     message = "Your Magnet Commission balance is GHS200"
            #     # message = f"Your Magnet Commission balance is GHS{balance}"
            #     menu_response = core_processor.goto_start.goto_start(request, message, "", goback_message)
            #     libhandler.writelog("agentuat_menu", f"Message: {message}")
            #
            # else:
            #     data = ""
            #     message = "Magnet Commission Balance cannot be viewed right now. Please try again later"
            #     menu_response = core_processor.goto_start.goto_start(request, message, data, goback_message)
            #     libhandler.writelog("agentuat_menu", f"Message: {message}")

            menu_response = loans_repayment.loans_repayment(request, "", bank_code, "REPSTA", pos, goback_message)

        elif service_id == 2:  # deposit
            menu_response = deposit_processor.deposit.deposit(request, bank_code, url, 2, "DEPSTA", pos,
                                                              goback_message)

        elif service_id == 3:  # withdrawal
            message = "Please select an option:^1. Initiate Withdrawal^2. Dispense Cash"
            menu_response = core_processor.make_response.make_response(request, "more", message)
            libhandler.writelog(logfile, f"message = {message}")
            session_processor.store_session.store_session(msisdn, sessionid, networkid, "MAGOPT")

        elif service_id == 4: # other income
            response = {"reason": "hello", "services": [{"id": 1, "name": "Entrance Fees"},
                                                        {"id": 2, "name": "Loan Application Fees"},
                                                        {"id": 3, "name": "Welfare Fees"}]}
            count = 0
            message = ""
            for n in response['services']:
                service_id = n['id']
                service = n['name']
                service = service.title()
                count += 1
                message += str(count) + '. ' + str(service) + '^'

            str_conv = json.dumps(response['services'])  # converting list to json string

            message = f"Please select an option:^{message}"
            menu_response = core_processor.make_response.make_response(request, "more", message)
            session_processor.store_menupoint.store_menupoint(request, "CCUFEE", str_conv)
            libhandler.writelog(logfile, f"Message:{message}")


        else:
            menu_response = core_processor.unknown_option.throw_unknown_option(request, "", goback_message)

    elif last_position == "CCUFEE":
        sel0 = userdata
        sel0 = int(sel0)
        sel = sel0 - 1

        extract = session_processor.get_ussd_extra.get_ussd_extra(pos)

        service_list = json.loads(extract)

        fee_id = service_list[sel]['id']
        fee_name = service_list[sel]['name']
        libhandler.writelog(logfile, f"extract1: {fee_id}")
        libhandler.writelog(logfile, f"extract2: {fee_name}")

        storeddata = f"{fee_id}|{fee_name}"
        message = f"Enter amount"
        menu_response = core_processor.make_response.make_response(request, "more", message)
        session_processor.store_menupoint.store_menupoint(request, "MDEPAY", storeddata)
        libhandler.writelog(logfile, f"Message:{message}")

    elif last_position == "MAGOPT":
        libhandler.writelog(logfile, f"message")
        if userdata == "1":     
            libhandler.writelog(logfile, f"testing")
            menu_response = withdrawal_processor.initiate_withdrawal.initiate_withdrawal(request, "WTDBNK", pos, goback_message)

        elif userdata == "2":
            menu_response = withdrawal_processor.dispense_cash.dispense_cash(request, "", "WTHBNK", pos, goback_message)

    elif pos[0:3] == "DEP":
        menu_response = deposit_processor.deposit.deposit(request, bank_code, url, 3, last_position, pos,
                                                          goback_message)

    elif pos[0:3] == "WTH":
        menu_response = withdrawal_processor.dispense_cash.dispense_cash(request, "", last_position, pos, goback_message)

    elif pos[0:3] == "WTD":
        menu_response = withdrawal_processor.initiate_withdrawal.initiate_withdrawal(request, last_position, pos, goback_message)

    elif pos[0:3] == "DEP":
        menu_response = deposit_processor.deposit.deposit(request, bank_code, url, 3, last_position, pos,
                                                          goback_message)

    elif pos[0:3] == "REP":
        menu_response = loans_repayment.loans_repayment(request, "", bank_code, last_position, pos, goback_message)

    elif pos[0:3]  == "MDE":
        menu_response = payment_processor.pay_methods(request, url, "", last_position, goback_message, pos)

    elif pos[0:3]  == "MPM":
         menu_response = pay_momo.momo_pay(request, url, "", last_position, goback_message, pos)

    elif ipos[0:3] == "MPB":
         menu_response = pay_bank.bank_pay(request, url, "", last_position, goback_message, pos)


    return menu_response


def magnet_cust(request, bank_code, url, last_position,pos, goback_message):
    menu_response = ""
    msisdn = request.GET["msisdn"]
    networkid = request.GET["networkid"]
    sessionid = request.GET["sessionid"]
    mode = request.GET["mode"]
    userdata = request.GET["userdata"]

    if last_position == "WTDBNK":
        menu_response = withdrawal_processor.initiate_withdrawal.initiate_withdrawal(request, "WTDBNK", pos, goback_message)

    elif pos[0:3] == "WTD":
        menu_response = withdrawal_processor.initiate_withdrawal.initiate_withdrawal(request, last_position, pos, goback_message)

    return menu_response

